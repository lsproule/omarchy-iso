#!/bin/bash

clear
ascii_art=' ▄██████▄    ▄▄▄▄███▄▄▄▄      ▄████████    ▄████████  ▄████████    ▄█    █▄    ▄██   ▄  
███    ███ ▄██▀▀▀███▀▀▀██▄   ███    ███   ███    ███ ███    ███   ███    ███   ███   ██▄
███    ███ ███   ███   ███   ███    ███   ███    ███ ███    █▀    ███    ███   ███▄▄▄███
███    ███ ███   ███   ███   ███    ███  ▄███▄▄▄▄██▀ ███         ▄███▄▄▄▄███▄▄ ▀▀▀▀▀▀███
███    ███ ███   ███   ███ ▀███████████ ▀▀███▀▀▀▀▀   ███        ▀▀███▀▀▀▀███▀  ▄██   ███
███    ███ ███   ███   ███   ███    ███ ▀███████████ ███    █▄    ███    ███   ███   ███
███    ███ ███   ███   ███   ███    ███   ███    ███ ███    ███   ███    ███   ███   ███
 ▀██████▀   ▀█   ███   █▀    ███    █▀    ███    ███ ████████▀    ███    █▀     ▀█████▀ 
                                          ███    ███                                    '

echo -e "\n$ascii_art\n"

INSTALLER_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BOOT_SIZE_MIB=513
SECTOR_BYTES=512



# Setup network
source "$INSTALLER_DIR/omarchy-network-setup"

# Prompt for user
username=$(gum input --placeholder "Enter new username")
password=$(gum input --password --placeholder "Enter password (will be used for user, root, and LUKS)")

# Select disk (filter out zram, loop, etc.)
DISK=$(lsblk -dpno NAME,SIZE,TYPE | grep -E '/dev/(sd|hd|vd|nvme|mmcblk)' | awk '{print $1, $2}' | gum choose --header "Select install disk")

if [[ -z "$DISK" ]]; then
  echo "No disk selected. Exiting."
  exit 1
fi

disk_bytes=$(lsblk -bnd -o SIZE "${DISK%% *}")
disk_mib=$((disk_bytes / 1024 / 1024))
root_mib=$((disk_mib - BOOT_SIZE_MIB))
ROOT_BYTES=$(($((root_mib - 1024)) * 1024 * 1024))
ROOT_START=$(( (BOOT_SIZE_MIB + 1) * 1024 * 1024 ))


# Detect fastest mirror region after network is up
BEST_REGION=$(gum spin --title "Detecting fastest Arch mirror region..." -- "$INSTALLER_DIR/omarchy-mirror-finder")
echo "Using mirror region: $BEST_REGION"




# Detect timezone
TZ_DETECT=$(gum spin --title "Detecting timezone..." -- bash -c 'wget -qO- ipinfo.io/timezone 2>/dev/null || echo "UTC"')
echo "Using timezone: $TZ_DETECT"

# Write archinstall JSON inline
cat >omarchy_configuration.json <<EOF
{
    "archinstall-language": "English",
    "audio_config": {
        "audio": "pipewire"
    },
    "bootloader": "Grub",
    "custom_commands": [],
    "disk_config": {
        "btrfs_options": {
            "snapshot_config": null
        },
        "config_type": "default_layout",
        "device_modifications": [
            {
                "device": "${DISK%% *}",
                "partitions": [
                    {
                        "btrfs": [],
                        "dev_path": null,
                        "flags": [
                            "boot"
                        ],
                        "fs_type": "fat32",
                        "mount_options": [],
                        "mountpoint": "/boot",
                        "obj_id": "8c4d24dc-e27c-42bd-8e22-e70c9f8a5910",
                        "size": {
                            "sector_size": {
                                "unit": "B",
                                "value": $SECTOR_BYTES
                            },
                            "unit": "MiB",
                            "value": $BOOT_SIZE_MIB
                        },
                        "start": {
                            "sector_size": {
                                "unit": "B",
                                "value": $SECTOR_BYTES
                            },
                            "unit": "MiB",
                            "value": 1
                        },
                        "status": "create",
                        "type": "primary"
                    },
                    {
                        "btrfs": [
                            {
                                "mountpoint": "/",
                                "name": "@"
                            },
                            {
                                "mountpoint": "/home",
                                "name": "@home"
                            },
                            {
                                "mountpoint": "/var/log",
                                "name": "@log"
                            },
                            {
                                "mountpoint": "/var/cache/pacman/pkg",
                                "name": "@pkg"
                            }
                        ],
                        "dev_path": null,
                        "flags": [],
                        "fs_type": "btrfs",
                        "mount_options": [
                            "compress=zstd"
                        ],
                        "mountpoint": null,
                        "obj_id": "a7b3df75-f3ff-4ba2-a158-7084bf224c38",
                        "size": {
                            "sector_size": {
                                "unit": "B",
                                "value": $SECTOR_BYTES
                            },
                            "unit": "B",
                            "value": $ROOT_BYTES 
                        },
                        "start": {
                            "sector_size": {
                                "unit": "B",
                                "value": $SECTOR_BYTES
                            },
                            "unit": "B",
                            "value": $ROOT_START
                        },
                        "status": "create",
                        "type": "primary"
                    }
                ],
                "wipe": true
            }
        ],
        "disk_encryption": {
            "encryption_type": "luks",
            "lvm_volumes": [],
            "partitions": [
                "a7b3df75-f3ff-4ba2-a158-7084bf224c38"
            ]
        }
    },
    "hostname": "archlinux",
    "kernels": [
        "linux"
    ],
    "locale_config": {
        "kb_layout": "us",
        "sys_enc": "UTF-8",
        "sys_lang": "en_US.UTF-8"
    },
    "mirror_config": {
        "custom_repositories": [],
        "custom_servers": [],
        "mirror_regions": {
            "$BEST_REGION": [ ]
        },
        "optional_repositories": []
    },
    "network_config": {
        "type": "iso"
    },
    "ntp": true,
    "packages": [ "wget" ],
    "parallel_downloads": 0,
    "services": [],
    "swap": true,
    "timezone": "$TZ_DETECT",
    "version": null
}
EOF

enc_password=$(echo "$password" | mkpasswd --method=YESCRYPT -s)
cat >omarchy_credentials.json <<EOF
{
    "encryption_password": "$password",
    "root_enc_password": "$enc_password",
    "users": [
        {
            "enc_password": "$enc_password",
            "groups": [],
            "sudo": true,
            "username": "$username"
        }
    ]
}
EOF

if [[ "$1" == "dry" ]]; then
  cat omarchy-archinstall.json
else
  # Run archinstall and log to file
  archinstall --config omarchy_configuration.json --creds omarchy_credentials.json --silent | tee /root/archinstall.log

  if [[ $? -ne 0 ]]; then
    echo "Archinstall failed. Check /root/archinstall.log for details."
    exit 1
  fi

  # Now run the live omarchy installer
  arch-chroot /mnt sudo -u "$username" bash -c 'wget -qO- https://omarchy.org/install | bash'

  if [[ $? -ne 0 ]]; then
    echo "Omarchy installation failed. Check the output above for details."
    exit 1
  fi

  # Reboot after setup
  reboot
fi
